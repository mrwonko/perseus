#pragma once

#include "ast.hpp"
#include "function_manager.hpp"

namespace perseus
{
  namespace detail
  {
    /**
    @brief Traverses an AST to extract the function declarations

    Annotates the ast::parser::function_definition nodes with the created manager entry.
    @returns A function manager handling all the extracted functions
    @throws semantic_error when invalid types are referenced in function signatures
    */
    function_manager extract_functions( ast::parser::file& ast );
    /**
    @brief Converts AST to one with proper binary operation nodes.

    The @ref grammar "parser" can't contain left recursion, which leads to a fairly ugly AST. That gets post-processed here.
    @param ast the AST generated by the parser
    @returns An equivalent cleaner AST with proper binary operations, instead of n-ary operation-lists.
    */
    ast::clean::file clean_parser_ast( ast::parser::file&& ast, const function_manager& functions );
  }
}
